import { Hero, HeroFilter, ApiResponse } from '@/types';const API_BASE_URL = '/api/heroes';export async function getHeroes(filters?: Partial<HeroFilter>): Promise<Hero[]> {  try {    const queryParams = new URLSearchParams();    if (filters) {      if (filters.region) queryParams.append('region', filters.region);      if (filters.award) queryParams.append('award', filters.award);      if (filters.rank) queryParams.append('rank', filters.rank);      if (filters.yearFrom) queryParams.append('yearFrom', filters.yearFrom);      if (filters.yearTo) queryParams.append('yearTo', filters.yearTo);      if (filters.searchQuery) queryParams.append('searchQuery', filters.searchQuery);    }    const url = `${API_BASE_URL}${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;    const response = await fetch(url);    if (!response.ok) {      throw new Error(`Ошибка: ${response.status}`);    }    const result: ApiResponse<Hero[]> = await response.json();    if (!result.success) {      throw new Error(result.message || 'Произошла ошибка при получении списка героев');    }    return result.data;  } catch (error) {    console.error('Ошибка при получении списка героев:', error);    return [];  }}export async function getHeroById(id: number): Promise<Hero | null> {  try {    const response = await fetch(`${API_BASE_URL}/${id}`);    if (!response.ok) {      if (response.status === 404) {        return null;      }      throw new Error(`Ошибка: ${response.status}`);    }    const result: ApiResponse<Hero> = await response.json();    if (!result.success) {      throw new Error(result.message || 'Произошла ошибка при получении данных о герое');    }    return result.data;  } catch (error) {    console.error('Ошибка при получении данных о герое:', error);    return null;  }}export async function addHero(heroData: Omit<Hero, 'id'>): Promise<Hero> {  try {    const response = await fetch(API_BASE_URL, {      method: 'POST',      headers: {        'Content-Type': 'application/json',      },      body: JSON.stringify(heroData),    });    if (!response.ok) {      throw new Error(`Ошибка: ${response.status}`);    }    const result: ApiResponse<Hero> = await response.json();    if (!result.success) {      throw new Error(result.message || 'Произошла ошибка при добавлении героя');    }    return result.data;  } catch (error) {    console.error('Ошибка при добавлении героя:', error);    throw error;  }}export async function updateHero(id: number, heroData: Partial<Omit<Hero, 'id'>>): Promise<Hero> {  try {    const response = await fetch(`${API_BASE_URL}/${id}`, {      method: 'PUT',      headers: {        'Content-Type': 'application/json',      },      body: JSON.stringify(heroData),    });    if (!response.ok) {      throw new Error(`Ошибка: ${response.status}`);    }    const result: ApiResponse<Hero> = await response.json();    if (!result.success) {      throw new Error(result.message || 'Произошла ошибка при обновлении героя');    }    return result.data;  } catch (error) {    console.error('Ошибка при обновлении героя:', error);    throw error;  }}export async function deleteHero(id: number): Promise<boolean> {  try {    const response = await fetch(`${API_BASE_URL}/${id}`, {      method: 'DELETE',    });    if (!response.ok) {      throw new Error(`Ошибка: ${response.status}`);    }    const result: ApiResponse<null> = await response.json();    if (!result.success) {      throw new Error(result.message || 'Произошла ошибка при удалении героя');    }    return true;  } catch (error) {    console.error('Ошибка при удалении героя:', error);    return false;  }} 