export type Hero = {  id: number;  name: string;  rank: string;  awards: string[];  region: string;  description: string;  years: string;  photo: string;};export type HeroFormData = {  fullName: string;  birthYear: string;  deathYear: string;  rank: string;  region: string;  awards: string;  description: string;  contactName: string;  contactEmail: string;  contactRelation: string;  photo: File | null;};export type HeroFilter = {  region: string;  award: string;  rank: string;  yearFrom: string;  yearTo: string;  searchQuery: string;};export type HistoricalEvent = {  id: string;  date: string;  title: string;  description: string;  content?: React.ReactNode;};export type GalleryItem = {  id: number;  src: string;  alt: string;  caption: string;};export type QuizQuestion = {  id: number;  question: string;  options: string[];  correctAnswer: number;  explanation?: string;};export type Quiz = {  id: string;  title: string;  description: string;  questions: QuizQuestion[];  time: string;  difficulty: 'Начальный' | 'Средний' | 'Продвинутый';};export type Film = {  id: number;  title: string;  year: number;  director: string;  poster: string;  rating: number;  description: string;  link: string;};export type Book = {  id: number;  title: string;  author: string;  year: number;  cover: string;  description: string;  link: string;};export type EducationalResource = {  id: number;  title: string;  description: string;  link: string;  category: string;  icon: React.ReactNode;};export type NewsItem = {  id: number;  title: string;  date: string;  category: 'Новость' | 'Анонс';  image: string;  excerpt: string;  url: string;};export type ApiResponse<T> = {  data: T;  success: boolean;  message?: string;};export type PaginatedResponse<T> = ApiResponse<{  items: T[];  total: number;  page: number;  limit: number;}>;export type UserSettings = {  darkMode: boolean;  notifications: boolean;  savedHeroes: number[];  quizProgress: Record<string, number>;}; 