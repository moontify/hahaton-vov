import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { heroes, schools } from '@/lib/db/schema';
import { eq, like } from 'drizzle-orm';

/**
 * API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤—ã—Ö –≥–µ—Ä–æ—è—Ö –∏ —à–∫–æ–ª–∞—Ö
 */

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ Telegram
async function sendAdminMenu(chatId: string): Promise<boolean> {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!botToken || !chatId) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é');
      return false;
    }
    
    const apiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    const inlineKeyboard = {
      inline_keyboard: [
        [
          { text: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ—Ä–æ—è–º–∏', callback_data: 'menu_heroes' },
          { text: 'üè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∫–æ–ª–∞–º–∏', callback_data: 'menu_schools' }
        ],
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'menu_stats' }
        ]
      ]
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: '<b>üîπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é üîπ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:',
        parse_mode: 'HTML',
        reply_markup: inlineKeyboard
      }),
    });
    
    if (!response.ok) {
      const errorData = await response.text();
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é –≤ Telegram:', errorData);
      return false;
    }
    
    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é –≤ Telegram:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async function sendHeroesList(chatId: string, page: number = 1, filter: string = ''): Promise<boolean> {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!botToken || !chatId) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤');
      return false;
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const pageSize = 5;
    const offset = (page - 1) * pageSize;
    
    // –ü–æ–ª—É—á–∞–µ–º –≥–µ—Ä–æ–µ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    let query = db.select().from(heroes);
    
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∏–ª—å—Ç—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if (filter) {
      query = query.where(
        like(heroes.lastName, `%${filter}%`)
      );
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≥–µ—Ä–æ–µ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const heroesList = await query.limit(pageSize).offset(offset);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ—Ä–æ–µ–≤ (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    let countQuery = db.select({ count: heroes.id }).from(heroes);
    if (filter) {
      countQuery = countQuery.where(
        like(heroes.lastName, `%${filter}%`)
      );
    }
    const countResult = await countQuery;
    const totalHeroes = countResult[0]?.count || 0;
    const totalPages = Math.ceil(totalHeroes / pageSize);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –≥–µ—Ä–æ–µ–≤
    if (heroesList.length === 0) {
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: filter 
            ? `<b>–ì–µ—Ä–æ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É "${filter}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`
            : '<b>–°–ø–∏—Å–æ–∫ –≥–µ—Ä–æ–µ–≤ –ø—É—Å—Ç</b>\n\n–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –≥–µ—Ä–æ–µ–≤.',
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'admin_menu' }]
            ]
          }
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.text();
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', errorData);
        return false;
      }
      
      const data = await response.json();
      return data.ok;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–µ—Ä–æ–µ–≤
    let message = `<b>üìã –°–ø–∏—Å–æ–∫ –≥–µ—Ä–æ–µ–≤</b>`;
    
    if (filter) {
      message += ` (–ø–æ–∏—Å–∫: ${filter})`;
    }
    
    message += `\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages || 1}:\n\n`;
    
    heroesList.forEach((hero, index) => {
      message += `${offset + index + 1}. <b>${hero.lastName} ${hero.firstName} ${hero.middleName || ''}</b>\n`;
      message += `   üè´ ${hero.school}, ${hero.class} –∫–ª–∞—Å—Å\n\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const inlineKeyboard: any = [];
    
    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–µ—Ä–æ—è
    heroesList.forEach((hero) => {
      inlineKeyboard.push([
        { 
          text: `‚úèÔ∏è ${hero.lastName} ${hero.firstName.charAt(0)}.`,
          callback_data: `edit_hero:${hero.id}` 
        },
        { 
          text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 
          callback_data: `delete_hero:${hero.id}` 
        }
      ]);
    });
    
    // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const paginationButtons = [];
    
    if (page > 1) {
      paginationButtons.push({ 
        text: '¬´ –ù–∞–∑–∞–¥', 
        callback_data: `heroes_page:${page - 1}${filter ? ':' + filter : ''}` 
      });
    }
    
    if (page < totalPages) {
      paginationButtons.push({ 
        text: '–í–ø–µ—Ä–µ–¥ ¬ª', 
        callback_data: `heroes_page:${page + 1}${filter ? ':' + filter : ''}` 
      });
    }
    
    if (paginationButtons.length > 0) {
      inlineKeyboard.push(paginationButtons);
    }
    
    // –ö–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    inlineKeyboard.push([
      { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'search_heroes' },
      { text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'admin_menu' }
    ]);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: inlineKeyboard }
      }),
    });
    
    if (!response.ok) {
      const errorData = await response.text();
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤ –≤ Telegram:', errorData);
      return false;
    }
    
    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤ –≤ Telegram:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —à–∫–æ–ª —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async function sendSchoolsList(chatId: string, page: number = 1, filter: string = ''): Promise<boolean> {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!botToken || !chatId) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —à–∫–æ–ª');
      return false;
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const pageSize = 8;
    const offset = (page - 1) * pageSize;
    
    // –ü–æ–ª—É—á–∞–µ–º —à–∫–æ–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    let query = db.select().from(schools);
    
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∏–ª—å—Ç—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if (filter) {
      query = query.where(
        like(schools.name, `%${filter}%`)
      );
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —à–∫–æ–ª—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const schoolsList = await query.limit(pageSize).offset(offset);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∫–æ–ª (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    let countQuery = db.select({ count: schools.id }).from(schools);
    if (filter) {
      countQuery = countQuery.where(
        like(schools.name, `%${filter}%`)
      );
    }
    const countResult = await countQuery;
    const totalSchools = countResult[0]?.count || 0;
    const totalPages = Math.ceil(totalSchools / pageSize);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —à–∫–æ–ª
    if (schoolsList.length === 0) {
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: filter 
            ? `<b>–®–∫–æ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É "${filter}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`
            : '<b>–°–ø–∏—Å–æ–∫ —à–∫–æ–ª –ø—É—Å—Ç</b>\n\n–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —à–∫–æ–ª.',
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'admin_menu' }]
            ]
          }
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.text();
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', errorData);
        return false;
      }
      
      const data = await response.json();
      return data.ok;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —à–∫–æ–ª
    let message = `<b>üè´ –°–ø–∏—Å–æ–∫ —à–∫–æ–ª</b>`;
    
    if (filter) {
      message += ` (–ø–æ–∏—Å–∫: ${filter})`;
    }
    
    message += `\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages || 1}:\n\n`;
    
    schoolsList.forEach((school, index) => {
      message += `${offset + index + 1}. <b>${school.name}</b>\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const inlineKeyboard: any = [];
    
    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —à–∫–æ–ª—ã
    schoolsList.forEach((school) => {
      inlineKeyboard.push([
        { 
          text: `‚úèÔ∏è ${school.name.length > 20 ? school.name.substring(0, 20) + '...' : school.name}`,
          callback_data: `edit_school:${school.id}` 
        },
        { 
          text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 
          callback_data: `delete_school:${school.id}` 
        }
      ]);
    });
    
    // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const paginationButtons = [];
    
    if (page > 1) {
      paginationButtons.push({ 
        text: '¬´ –ù–∞–∑–∞–¥', 
        callback_data: `schools_page:${page - 1}${filter ? ':' + filter : ''}` 
      });
    }
    
    if (page < totalPages) {
      paginationButtons.push({ 
        text: '–í–ø–µ—Ä–µ–¥ ¬ª', 
        callback_data: `schools_page:${page + 1}${filter ? ':' + filter : ''}` 
      });
    }
    
    if (paginationButtons.length > 0) {
      inlineKeyboard.push(paginationButtons);
    }
    
    // –ö–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    inlineKeyboard.push([
      { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'search_schools' },
      { text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'admin_menu' }
    ]);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: inlineKeyboard }
      }),
    });
    
    if (!response.ok) {
      const errorData = await response.text();
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ —à–∫–æ–ª –≤ Telegram:', errorData);
      return false;
    }
    
    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ —à–∫–æ–ª –≤ Telegram:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
async function sendTelegramMessageWithButtons(message: string, heroId: number): Promise<{ success: boolean, messageId?: string }> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!botToken || !chatId) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram –±–æ—Ç–∞');
      return { success: false };
    }

    // URL –¥–ª—è API Telegram
    const apiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    const inlineKeyboard = {
      inline_keyboard: [
        [
          { 
            text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', 
            callback_data: `approve_hero:${heroId}` 
          },
          { 
            text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 
            callback_data: `reject_hero:${heroId}` 
          }
        ]
      ]
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML',
        reply_markup: inlineKeyboard
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${response.status} ${response.statusText}`, errorText);
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    if (data.ok && data.result && typeof data.result.message_id !== 'undefined') {
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram, ID:', data.result.message_id);
      return { 
        success: true, 
        messageId: String(data.result.message_id) 
      };
    } else {
      console.warn('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ ID –Ω–µ –ø–æ–ª—É—á–µ–Ω:', data);
      return { success: true };
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
    return { success: false };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(message: string): Promise<boolean> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!botToken || !chatId) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram –±–æ—Ç–∞');
      return false;
    }

    // URL –¥–ª—è API Telegram
    const apiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML',
      }),
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
    return false;
  }
}

/**
 * POST /api/telegram
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 */
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞ –ø–æ API –∫–ª—é—á—É
    const apiKey = request.headers.get('x-api-key');
    const validApiKey = process.env.API_KEY;

    if (!validApiKey || apiKey !== validApiKey) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á' },
        { status: 401 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const data = await request.json();
    
    if (!data.message) {
      return NextResponse.json(
        { success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ "message"' },
        { status: 400 }
      );
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≥–µ—Ä–æ—è
    if (data.heroId) {
      const result = await sendTelegramMessageWithButtons(data.message, data.heroId);
      
      if (result.success) {
        return NextResponse.json({ 
          success: true, 
          messageId: result.messageId 
        });
      } else {
        return NextResponse.json(
          { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram' },
          { status: 500 }
        );
      }
    } else {
      // –ò–Ω–∞—á–µ –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const success = await sendTelegramMessage(data.message);

      if (success) {
        return NextResponse.json({ success: true });
      } else {
        return NextResponse.json(
          { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram' },
          { status: 500 }
        );
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

/**
 * GET /api/telegram/webhook
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –æ—Ç Telegram —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
 */
export async function GET(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const searchParams = request.nextUrl.searchParams;
    const callbackData = searchParams.get('callback_data');
    const apiKey = searchParams.get('api_key');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞ –ø–æ API –∫–ª—é—á—É
    const validApiKey = process.env.API_KEY;
    if (!validApiKey || apiKey !== validApiKey) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á' },
        { status: 401 }
      );
    }

    if (!callbackData) {
      return NextResponse.json(
        { success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ callback_data' },
        { status: 400 }
      );
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    // —Ñ–æ—Ä–º–∞—Ç: action:id - –Ω–∞–ø—Ä–∏–º–µ—Ä, approve_hero:123 –∏–ª–∏ reject_hero:123
    const [action, idStr] = callbackData.split(':');
    const id = parseInt(idStr, 10);

    if (isNaN(id)) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥–µ—Ä–æ—è' },
        { status: 400 }
      );
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    return NextResponse.json({
      success: true,
      action,
      id
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
} 