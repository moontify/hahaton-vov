import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { heroes, heroesModeration, schools } from '@/lib/db/schema';
import { eq, like } from 'drizzle-orm';

/**
 * –í–µ–±—Ö—É–∫ –¥–ª—è Telegram: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
 */

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
 */
async function editTelegramMessage(messageId: string, newText: string): Promise<boolean> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!botToken || !chatId || !messageId) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è');
      return false;
    }

    // URL –¥–ª—è API Telegram
    const apiUrl = `https://api.telegram.org/bot${botToken}/editMessageText`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        message_id: messageId,
        text: newText,
        parse_mode: 'HTML',
        // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å reply_markup, —Ç–æ –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup: { inline_keyboard: [] }
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', errorData);
      return false;
    }

    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
    return false;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ Telegram
 */
async function sendAdminMenu(chatId: string): Promise<boolean> {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!botToken || !chatId) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é');
      return false;
    }
    
    const apiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    const inlineKeyboard = {
      inline_keyboard: [
        [
          { text: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ—Ä–æ—è–º–∏', callback_data: 'menu_heroes' },
          { text: 'üè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∫–æ–ª–∞–º–∏', callback_data: 'menu_schools' }
        ],
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'menu_stats' }
        ]
      ]
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: '<b>üîπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é üîπ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:',
        parse_mode: 'HTML',
        reply_markup: inlineKeyboard
      }),
    });
    
    if (!response.ok) {
      const errorData = await response.text();
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é –≤ Telegram:', errorData);
      return false;
    }
    
    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é –≤ Telegram:', error);
    return false;
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const cache = {
  heroes: {
    data: null,
    timestamp: 0,
    // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ - 60 —Å–µ–∫—É–Ω–¥
    ttl: 60 * 1000
  },
  schools: {
    data: null,
    timestamp: 0,
    ttl: 60 * 1000
  },
  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –∫—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  async getOrFetch<T>(key: 'heroes' | 'schools', fetchFn: () => Promise<T>): Promise<T> {
    const now = Date.now();
    const cacheItem = this[key];
    
    if (cacheItem.data && now - cacheItem.timestamp < cacheItem.ttl) {
      return cacheItem.data as T;
    }
    
    const data = await fetchFn();
    cacheItem.data = data;
    cacheItem.timestamp = now;
    return data;
  },
  // –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—ç—à
  invalidate(key: 'heroes' | 'schools') {
    this[key].data = null;
    this[key].timestamp = 0;
  }
};

/**
 * POST /api/telegram/webhook
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –æ—Ç Telegram —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
 */
export async function POST(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const data = await request.json();
    
    // –°—Ä–∞–∑—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    const response = NextResponse.json({ 
      success: true, 
      message: '–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É' 
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    Promise.resolve().then(async () => {
      try {
        // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (data.callback_query && data.callback_query.id) {
          answerCallbackQuery(data.callback_query.id).catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback_query:', error);
          });
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (data.message && data.message.text && !data.message.text.startsWith('/')) {
          const chatId = data.message.chat.id.toString();
          const text = data.message.text;
          
          await sendTelegramMessage(chatId, `–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"\n\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.`);
          await sendAdminMenu(chatId);
          return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if (data.message && data.message.text === '/start') {
          const chatId = data.message.chat.id.toString();
          await sendAdminMenu(chatId);
          return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
        if (data.callback_query) {
          const callbackData = data.callback_query.data;
          const chatId = data.callback_query.message.chat.id.toString();
          
          await handleCallbackQuery(data, callbackData, chatId);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
      }
    });
    
    return response;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback_query
 */
async function answerCallbackQuery(callbackQueryId: string, text?: string): Promise<boolean> {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!botToken || !callbackQueryId) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ ID callback_query');
      return false;
    }
    
    // URL –¥–ª—è API Telegram
    const apiUrl = `https://api.telegram.org/bot${botToken}/answerCallbackQuery`;
    
    // –ì–æ—Ç–æ–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const params: any = { callback_query_id: callbackQueryId };
    if (text) params.text = text;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(params),
    });
    
    if (!response.ok) {
      const errorData = await response.text();
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback_query:', errorData);
      return false;
    }
    
    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback_query:', error);
    return false;
  }
}

/**
 * GET /api/telegram/webhook
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ–±—Ö—É–∫–∞
 */
export async function GET(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const searchParams = request.nextUrl.searchParams;
    const mode = searchParams.get('mode');
    const apiKey = searchParams.get('api_key');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞ –ø–æ API –∫–ª—é—á—É
    const validApiKey = process.env.ADMIN_API_KEY;
    if (!validApiKey || apiKey !== validApiKey) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á' },
        { status: 401 }
      );
    }

    // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
    if (mode === 'setup') {
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      const baseUrl = process.env.NEXT_PUBLIC_BASE_URL;
      
      if (!botToken || !baseUrl) {
        return NextResponse.json(
          { success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è' },
          { status: 500 }
        );
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS
      if (!baseUrl.startsWith('https://') && !searchParams.get('force')) {
        return NextResponse.json(
          { 
            success: false, 
            error: 'URL –≤–µ–±—Ö—É–∫–∞ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS. –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:', 
            solutions: [
              '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ngrok (https://ngrok.com) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTTPS —Ç—É–Ω–Ω–µ–ª—è –∫ –≤–∞—à–µ–º—É –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É',
              '–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä &force=true –∫ –∑–∞–ø—Ä–æ—Å—É –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)',
              '–î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π HTTPS URL'
            ],
            helpUrl: 'https://core.telegram.org/bots/webhooks'
          },
          { status: 400 }
        );
      }
      
      // URL –¥–ª—è API Telegram
      const apiUrl = `https://api.telegram.org/bot${botToken}/setWebhook`;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –≤–µ–±—Ö—É–∫–∞
      const webhookUrl = `${baseUrl}/api/telegram/webhook`;
      
      console.log(`–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ URL: ${webhookUrl}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          url: webhookUrl,
          allowed_updates: ['callback_query']
        }),
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        
        // –ï—Å–ª–∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ HTTPS, –¥–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        if (errorText.includes('HTTPS URL must be provided')) {
          return NextResponse.json(
            { 
              success: false, 
              error: 'Telegram —Ç—Ä–µ–±—É–µ—Ç HTTPS URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞', 
              details: errorText,
              ngrokSetup: [
                '1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ngrok: npm install -g ngrok –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ —Å https://ngrok.com',
                '2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç—É–Ω–Ω–µ–ª—å: ngrok http 3000',
                '3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ HTTPS URL, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Å—Ç Ngrok (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://a1b2c3d4.ngrok.io)',
                '4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è NEXT_PUBLIC_BASE_URL=<–≤–∞—à ngrok url>',
                '5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
              ]
            },
            { status: 400 }
          );
        }
        
        return NextResponse.json(
          { success: false, error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: ${response.status} ${response.statusText}`, details: errorText },
          { status: response.status }
        );
      }
      
      const data = await response.json();
      return NextResponse.json({
        success: data.ok,
        result: data.result,
        description: data.description,
        webhook_url: webhookUrl
      });
    } 
    
    // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞
    if (mode === 'remove') {
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      
      if (!botToken) {
        return NextResponse.json(
          { success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN' },
          { status: 500 }
        );
      }
      
      // URL –¥–ª—è API Telegram
      const apiUrl = `https://api.telegram.org/bot${botToken}/deleteWebhook`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram
      const response = await fetch(apiUrl, {
        method: 'POST'
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        return NextResponse.json(
          { success: false, error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: ${response.status} ${response.statusText}`, details: errorText },
          { status: 500 }
        );
      }
      
      const data = await response.json();
      return NextResponse.json({
        success: data.ok,
        result: data.result,
        description: data.description
      });
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!botToken) {
      return NextResponse.json(
        { success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN' },
        { status: 500 }
      );
    }
    
    // URL –¥–ª—è API Telegram
    const apiUrl = `https://api.telegram.org/bot${botToken}/getWebhookInfo`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram
    const response = await fetch(apiUrl);
    
    if (!response.ok) {
      const errorText = await response.text();
      return NextResponse.json(
        { success: false, error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ: ${response.status} ${response.statusText}`, details: errorText },
        { status: 500 }
      );
    }
    
    const data = await response.json();
    return NextResponse.json({
      success: data.ok,
      result: data.result
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ sendHeroesList
async function sendHeroesList(chatId: string, page: number = 1, filter: string = ''): Promise<boolean> {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!botToken || !chatId) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤');
      return false;
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const pageSize = 5;
    const offset = (page - 1) * pageSize;
    
    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    const fetchHeroes = async () => {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
      if (filter) {
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã count –∏ select
        const query = db
          .select({
            id: heroes.id,
            firstName: heroes.firstName,
            lastName: heroes.lastName,
            middleName: heroes.middleName,
            school: heroes.school,
            class: heroes.class,
            totalCount: db.sql<number>`count(*) over()`
          })
          .from(heroes)
          .where(like(heroes.lastName, `%${filter}%`))
          .limit(pageSize)
          .offset(offset);
        
        const results = await query;
        
        if (results.length === 0) {
          return { heroesList: [], totalHeroes: 0 };
        }
        
        return {
          heroesList: results,
          totalHeroes: results[0].totalCount
        };
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –∏–ª–∏ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
      return cache.getOrFetch('heroes', async () => {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ —Å—Ä–∞–∑—É –∏ —Ö—Ä–∞–Ω–∏–º –≤ –∫—ç—à–µ
        const allHeroes = await db.select().from(heroes);
        return {
          heroesList: allHeroes.slice(offset, offset + pageSize),
          totalHeroes: allHeroes.length
        };
      });
    };
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –±–∞–∑—ã
    const { heroesList, totalHeroes } = await fetchHeroes();
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ—Ä–æ–µ–≤ (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    let countQuery = db.select({ count: heroes.id }).from(heroes);
    if (filter) {
      countQuery = countQuery.where(
        like(heroes.lastName, `%${filter}%`)
      );
    }
    const countResult = await countQuery;
    const totalPages = Math.ceil(totalHeroes / pageSize);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –≥–µ—Ä–æ–µ–≤
    if (heroesList.length === 0) {
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: filter 
            ? `<b>–ì–µ—Ä–æ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É "${filter}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`
            : '<b>–°–ø–∏—Å–æ–∫ –≥–µ—Ä–æ–µ–≤ –ø—É—Å—Ç</b>\n\n–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –≥–µ—Ä–æ–µ–≤.',
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'admin_menu' }]
            ]
          }
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.text();
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', errorData);
        return false;
      }
      
      const data = await response.json();
      return data.ok;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–µ—Ä–æ–µ–≤
    let message = `<b>üìã –°–ø–∏—Å–æ–∫ –≥–µ—Ä–æ–µ–≤</b>`;
    
    if (filter) {
      message += ` (–ø–æ–∏—Å–∫: ${filter})`;
    }
    
    message += `\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages || 1}:\n\n`;
    
    heroesList.forEach((hero, index) => {
      message += `${offset + index + 1}. <b>${hero.lastName} ${hero.firstName} ${hero.middleName || ''}</b>\n`;
      message += `   üè´ ${hero.school}, ${hero.class} –∫–ª–∞—Å—Å\n\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const inlineKeyboard: any = [];
    
    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–µ—Ä–æ—è
    heroesList.forEach((hero) => {
      inlineKeyboard.push([
        { 
          text: `‚úèÔ∏è ${hero.lastName} ${hero.firstName.charAt(0)}.`,
          callback_data: `edit_hero:${hero.id}` 
        },
        { 
          text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 
          callback_data: `delete_hero:${hero.id}` 
        }
      ]);
    });
    
    // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const paginationButtons = [];
    
    if (page > 1) {
      paginationButtons.push({ 
        text: '¬´ –ù–∞–∑–∞–¥', 
        callback_data: `heroes_page:${page - 1}${filter ? ':' + filter : ''}` 
      });
    }
    
    if (page < totalPages) {
      paginationButtons.push({ 
        text: '–í–ø–µ—Ä–µ–¥ ¬ª', 
        callback_data: `heroes_page:${page + 1}${filter ? ':' + filter : ''}` 
      });
    }
    
    if (paginationButtons.length > 0) {
      inlineKeyboard.push(paginationButtons);
    }
    
    // –ö–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    inlineKeyboard.push([
      { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'search_heroes' },
      { text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'admin_menu' }
    ]);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: inlineKeyboard }
      }),
    });
    
    if (!response.ok) {
      const errorData = await response.text();
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤ –≤ Telegram:', errorData);
      return false;
    }
    
    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤ –≤ Telegram:', error);
    return false;
  }
}

// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é sendSchoolsList
async function sendSchoolsList(chatId: string, page: number = 1, filter: string = ''): Promise<boolean> {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!botToken || !chatId) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —à–∫–æ–ª');
      return false;
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const pageSize = 8;
    const offset = (page - 1) * pageSize;
    
    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    const fetchSchools = async () => {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
      if (filter) {
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã count –∏ select
        const query = db
          .select({
            id: schools.id,
            name: schools.name,
            totalCount: db.sql<number>`count(*) over()`
          })
          .from(schools)
          .where(like(schools.name, `%${filter}%`))
          .limit(pageSize)
          .offset(offset);
        
        const results = await query;
        
        if (results.length === 0) {
          return { schoolsList: [], totalSchools: 0 };
        }
        
        return {
          schoolsList: results,
          totalSchools: results[0].totalCount
        };
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –∏–ª–∏ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
      return cache.getOrFetch('schools', async () => {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∫–æ–ª—ã —Å—Ä–∞–∑—É –∏ —Ö—Ä–∞–Ω–∏–º –≤ –∫—ç—à–µ
        const allSchools = await db.select().from(schools);
        return {
          schoolsList: allSchools.slice(offset, offset + pageSize),
          totalSchools: allSchools.length
        };
      });
    };
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –±–∞–∑—ã
    const { schoolsList, totalSchools } = await fetchSchools();
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∫–æ–ª (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    let countQuery = db.select({ count: schools.id }).from(schools);
    if (filter) {
      countQuery = countQuery.where(
        like(schools.name, `%${filter}%`)
      );
    }
    const countResult = await countQuery;
    const totalPages = Math.ceil(totalSchools / pageSize);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —à–∫–æ–ª
    if (schoolsList.length === 0) {
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: filter 
            ? `<b>–®–∫–æ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É "${filter}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`
            : '<b>–°–ø–∏—Å–æ–∫ —à–∫–æ–ª –ø—É—Å—Ç</b>\n\n–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —à–∫–æ–ª.',
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'admin_menu' }]
            ]
          }
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.text();
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', errorData);
        return false;
      }
      
      const data = await response.json();
      return data.ok;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —à–∫–æ–ª
    let message = `<b>üè´ –°–ø–∏—Å–æ–∫ —à–∫–æ–ª</b>`;
    
    if (filter) {
      message += ` (–ø–æ–∏—Å–∫: ${filter})`;
    }
    
    message += `\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages || 1}:\n\n`;
    
    schoolsList.forEach((school, index) => {
      message += `${offset + index + 1}. <b>${school.name}</b>\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const inlineKeyboard: any = [];
    
    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —à–∫–æ–ª—ã
    schoolsList.forEach((school) => {
      inlineKeyboard.push([
        { 
          text: `‚úèÔ∏è ${school.name.length > 20 ? school.name.substring(0, 20) + '...' : school.name}`,
          callback_data: `edit_school:${school.id}` 
        },
        { 
          text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 
          callback_data: `delete_school:${school.id}` 
        }
      ]);
    });
    
    // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const paginationButtons = [];
    
    if (page > 1) {
      paginationButtons.push({ 
        text: '¬´ –ù–∞–∑–∞–¥', 
        callback_data: `schools_page:${page - 1}${filter ? ':' + filter : ''}` 
      });
    }
    
    if (page < totalPages) {
      paginationButtons.push({ 
        text: '–í–ø–µ—Ä–µ–¥ ¬ª', 
        callback_data: `schools_page:${page + 1}${filter ? ':' + filter : ''}` 
      });
    }
    
    if (paginationButtons.length > 0) {
      inlineKeyboard.push(paginationButtons);
    }
    
    // –ö–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    inlineKeyboard.push([
      { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'search_schools' },
      { text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'admin_menu' }
    ]);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: inlineKeyboard }
      }),
    });
    
    if (!response.ok) {
      const errorData = await response.text();
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ —à–∫–æ–ª –≤ Telegram:', errorData);
      return false;
    }
    
    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ —à–∫–æ–ª –≤ Telegram:', error);
    return false;
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendTelegramMessage(chatId: string, message: string): Promise<boolean> {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!botToken || !chatId) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
      return false;
    }
    
    const apiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      }),
    });
    
    if (!response.ok) {
      const errorData = await response.text();
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', errorData);
      return false;
    }
    
    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
    return false;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query
 */
async function handleCallbackQuery(data: any, callbackData: string, chatId: string): Promise<void> {
  try {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if (callbackData === 'admin_menu') {
      await sendAdminMenu(chatId);
      return;
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ—Ä–æ—è–º–∏"
    if (callbackData === 'menu_heroes') {
      await sendHeroesList(chatId);
      return;
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∫–æ–ª–∞–º–∏"
    if (callbackData === 'menu_schools') {
      await sendSchoolsList(chatId);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤
    if (callbackData.startsWith('heroes_page:')) {
      const parts = callbackData.split(':');
      const page = parseInt(parts[1], 10);
      const filter = parts.length > 2 ? parts[2] : '';
      await sendHeroesList(chatId, page, filter);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —à–∫–æ–ª
    if (callbackData.startsWith('schools_page:')) {
      const parts = callbackData.split(':');
      const page = parseInt(parts[1], 10);
      const filter = parts.length > 2 ? parts[2] : '';
      await sendSchoolsList(chatId, page, filter);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–µ—Ä–æ—è
    if (callbackData.startsWith('delete_hero:')) {
      const parts = callbackData.split(':');
      const heroId = parseInt(parts[1], 10);
      
      if (isNaN(heroId)) {
        console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥–µ—Ä–æ—è:', parts[1]);
        return;
      }
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ—Ä–æ–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        const heroToDelete = await db.select().from(heroes).where(eq(heroes.id, heroId)).limit(1);
        
        if (heroToDelete.length === 0) {
          console.error('–ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω:', heroId);
          return;
        }
        
        const hero = heroToDelete[0];
        
        // –£–¥–∞–ª—è–µ–º –≥–µ—Ä–æ—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await db.delete(heroes).where(eq(heroes.id, heroId));
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –≥–µ—Ä–æ–µ–≤
        cache.invalidate('heroes');
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        let moderatorName = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä";
        if (data.callback_query.from) {
          const from = data.callback_query.from;
          moderatorName = from.first_name || "";
          if (from.last_name) moderatorName += " " + from.last_name;
          if (from.username) moderatorName += ` (@${from.username})`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        const successMessage = `–ì–µ—Ä–æ–π <b>${hero.lastName} ${hero.firstName} ${hero.middleName || ''}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n\n–£–¥–∞–ª–∏–ª: ${moderatorName}`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await sendTelegramMessage(chatId, successMessage);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–µ—Ä–æ–µ–≤
        await sendHeroesList(chatId);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–µ—Ä–æ—è:', error);
      }
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ—Ä–æ—è
    if (callbackData.startsWith('edit_hero:')) {
      const parts = callbackData.split(':');
      const heroId = parseInt(parts[1], 10);
      
      if (isNaN(heroId)) {
        console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥–µ—Ä–æ—è:', parts[1]);
        return;
      }
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ—Ä–æ–µ
        const heroToEdit = await db.select().from(heroes).where(eq(heroes.id, heroId)).limit(1);
        
        if (heroToEdit.length === 0) {
          console.error('–ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω:', heroId);
          return;
        }
        
        const hero = heroToEdit[0];
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–µ—Ä–æ–µ
        let message = `<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ—Ä–æ—è</b>\n\n`;
        message += `<b>–§–ò–û:</b> ${hero.lastName} ${hero.firstName} ${hero.middleName || ''}\n`;
        message += `<b>–®–∫–æ–ª–∞:</b> ${hero.school}\n`;
        message += `<b>–ö–ª–∞—Å—Å:</b> ${hero.class}\n`;
        message += `<b>–î–æ–±–∞–≤–∏–ª:</b> ${hero.addedBy || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
        
        if (hero.birthYear) {
          message += `<b>–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ${hero.birthYear}\n`;
        }
        
        if (hero.deathYear) {
          message += `<b>–ì–æ–¥ —Å–º–µ—Ä—Ç–∏:</b> ${hero.deathYear}\n`;
        }
        
        if (hero.awards) {
          message += `<b>–ù–∞–≥—Ä–∞–¥—ã:</b> ${hero.awards}\n`;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
        const inlineKeyboard = {
          inline_keyboard: [
            [
              { text: '‚úèÔ∏è –§–∞–º–∏–ª–∏—è', callback_data: `edit_hero_field:${heroId}:lastName` },
              { text: '‚úèÔ∏è –ò–º—è', callback_data: `edit_hero_field:${heroId}:firstName` }
            ],
            [
              { text: '‚úèÔ∏è –û—Ç—á–µ—Å—Ç–≤–æ', callback_data: `edit_hero_field:${heroId}:middleName` },
              { text: '‚úèÔ∏è –®–∫–æ–ª–∞', callback_data: `edit_hero_field:${heroId}:school` }
            ],
            [
              { text: '‚úèÔ∏è –ö–ª–∞—Å—Å', callback_data: `edit_hero_field:${heroId}:class` },
              { text: '‚úèÔ∏è –ù–∞–≥—Ä–∞–¥—ã', callback_data: `edit_hero_field:${heroId}:awards` }
            ],
            [
              { text: '‚úèÔ∏è –ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: `edit_hero_field:${heroId}:birthYear` },
              { text: '‚úèÔ∏è –ì–æ–¥ —Å–º–µ—Ä—Ç–∏', callback_data: `edit_hero_field:${heroId}:deathYear` }
            ],
            [
              { text: '¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'menu_heroes' }
            ]
          ]
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            chat_id: chatId,
            text: message,
            parse_mode: 'HTML',
            reply_markup: inlineKeyboard
          }),
        });
        
        if (!response.ok) {
          const errorData = await response.text();
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram:', errorData);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ—Ä–æ—è:', error);
      }
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≥–µ—Ä–æ–µ–≤
    if (callbackData.startsWith('approve_hero:') || callbackData.startsWith('reject_hero:')) {
      const [action, idStr] = callbackData.split(':');
      const id = parseInt(idStr, 10);
      
      if (isNaN(id)) {
        console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥–µ—Ä–æ—è:', idStr);
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –≥–µ—Ä–æ—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
      const heroOnModeration = await db.select().from(heroesModeration).where(eq(heroesModeration.id, id)).limit(1);
      
      if (heroOnModeration.length === 0) {
        console.error('–ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', id);
        return;
      }
      
      const hero = heroOnModeration[0];
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
      let moderatorName = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä";
      if (data.callback_query.from) {
        const from = data.callback_query.from;
        moderatorName = from.first_name || "";
        if (from.last_name) moderatorName += " " + from.last_name;
        if (from.username) moderatorName += ` (@${from.username})`;
      }
      
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–µ—Ä–æ–µ
      let messageText = `<b>üéñÔ∏è –ì–µ—Ä–æ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n`;
      messageText += `<b>–§–ò–û:</b> ${hero.lastName} ${hero.firstName} ${hero.middleName || ''}\n`;
      messageText += `<b>–®–∫–æ–ª–∞:</b> ${hero.school}\n`;
      messageText += `<b>–ö–ª–∞—Å—Å:</b> ${hero.class}\n`;
      messageText += `<b>–î–æ–±–∞–≤–∏–ª:</b> ${hero.addedBy}\n`;
      
      if (hero.birthYear) {
        messageText += `<b>–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ${hero.birthYear}\n`;
      }
      
      if (hero.deathYear) {
        messageText += `<b>–ì–æ–¥ —Å–º–µ—Ä—Ç–∏:</b> ${hero.deathYear}\n`;
      }
      
      if (hero.awards) {
        messageText += `<b>–ù–∞–≥—Ä–∞–¥—ã:</b> ${hero.awards}\n`;
      }
      
      if (hero.isNewSchool) {
        messageText += `\n<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</b> –ù–æ–≤–∞—è —à–∫–æ–ª–∞: <b>${hero.school}</b>\n`;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      if (action === 'approve_hero') {
        // –û–¥–æ–±—Ä—è–µ–º –≥–µ—Ä–æ—è - –ø–µ—Ä–µ–Ω–æ—Å–∏–º –µ–≥–æ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        await db.insert(heroes).values({
          lastName: hero.lastName,
          firstName: hero.firstName,
          middleName: hero.middleName,
          birthYear: hero.birthYear,
          deathYear: hero.deathYear,
          awards: hero.awards,
          school: hero.school,
          class: hero.class,
          addedBy: hero.addedBy
        });
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è —à–∫–æ–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ —Ç–∞–±–ª–∏—Ü—É —à–∫–æ–ª
        if (hero.isNewSchool) {
          try {
            await db.insert(schools).values({
              name: hero.school
            }).onConflictDoNothing();
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à–∫–æ–ª—ã:', error);
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ—Ä–æ—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await db.update(heroesModeration)
          .set({ status: 'approved' })
          .where(eq(heroesModeration.id, id));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        const approvalText = messageText + `\n\n‚úÖ <b>–û–î–û–ë–†–ï–ù–û</b> (${moderatorName})\n\n–ì–µ—Ä–æ–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫`;
        if (hero.telegramMessageId) {
          await editTelegramMessage(hero.telegramMessageId, approvalText);
        }
      } 
      else if (action === 'reject_hero') {
        // –û—Ç–∫–ª–æ–Ω—è–µ–º –≥–µ—Ä–æ—è - –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
        await db.update(heroesModeration)
          .set({ status: 'rejected' })
          .where(eq(heroesModeration.id, id));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        const rejectionText = messageText + `\n\n‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–û</b> (${moderatorName})\n\n–ì–µ—Ä–æ–π –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫`;
        if (hero.telegramMessageId) {
          await editTelegramMessage(hero.telegramMessageId, rejectionText);
        }
      }
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è –≥–µ—Ä–æ—è
    if (callbackData.startsWith('edit_hero_field:')) {
      const parts = callbackData.split(':');
      if (parts.length < 3) {
        console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data:', callbackData);
        return;
      }
      
      const heroId = parseInt(parts[1], 10);
      const fieldName = parts[2];
      
      if (isNaN(heroId)) {
        console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥–µ—Ä–æ—è:', parts[1]);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –¥–æ–ø—É—Å—Ç–∏–º–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const allowedFields = ['lastName', 'firstName', 'middleName', 'school', 'class', 'awards', 'birthYear', 'deathYear'];
      if (!allowedFields.includes(fieldName)) {
        console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—è:', fieldName);
        return;
      }
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ—Ä–æ–µ
        const heroToEdit = await db.select().from(heroes).where(eq(heroes.id, heroId)).limit(1);
        
        if (heroToEdit.length === 0) {
          console.error('–ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω:', heroId);
          return;
        }
        
        const hero = heroToEdit[0];
        
        // –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
        const fieldLabels: Record<string, string> = {
          lastName: '–§–∞–º–∏–ª–∏—è',
          firstName: '–ò–º—è',
          middleName: '–û—Ç—á–µ—Å—Ç–≤–æ',
          school: '–®–∫–æ–ª–∞',
          class: '–ö–ª–∞—Å—Å',
          awards: '–ù–∞–≥—Ä–∞–¥—ã',
          birthYear: '–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è',
          deathYear: '–ì–æ–¥ —Å–º–µ—Ä—Ç–∏'
        };
        
        // –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
        const currentValue = hero[fieldName as keyof typeof hero] || '';
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        const message = `<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è "${fieldLabels[fieldName]}"</b>\n\n` +
          `–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>${currentValue}</b>\n\n` +
          `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è "${fieldLabels[fieldName]}" –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n` +
          `–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≥–µ—Ä–æ—è.`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        const inlineKeyboard = {
          inline_keyboard: [
            [
              { text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: `edit_hero:${heroId}` }
            ]
          ]
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            chat_id: chatId,
            text: message,
            parse_mode: 'HTML',
            reply_markup: inlineKeyboard
          }),
        });
        
        if (!response.ok) {
          const errorData = await response.text();
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ Telegram:', errorData);
          return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–µ –∏ ID –≥–µ—Ä–æ—è –≤ –∫—ç—à–µ –∏–ª–∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        // –ß—Ç–æ–±—ã –ø–æ—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // NOTE: –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Redis/Memcached
        // –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        const responseData = await response.json();
        if (responseData.ok && responseData.result.message_id) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Å–≤—è–∑–∞—Ç—å –æ—Ç–≤–µ—Ç —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º –ø–æ–ª–µ–º
          // –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å metadata –≤ DB –∏–ª–∏ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤ memory
          console.log(`–û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –¥–ª—è –ø–æ–ª—è ${fieldName} –≥–µ—Ä–æ—è ${heroId}, message_id: ${responseData.result.message_id}`);
          
          // –í –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö editStatus
          // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (Redis, etc.)
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è:', error);
      }
      return;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:', error);
  }
} 