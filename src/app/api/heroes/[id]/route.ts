import { NextRequest, NextResponse } from 'next/server';import { sql } from '@vercel/postgres';import { addHeroAwards, getHeroAwards, mapDbHeroToHero } from '@/lib/db';export async function GET(  request: NextRequest,  { params }: { params: { id: string } }) {  try {    const id = parseInt(params.id, 10);    if (isNaN(id)) {      return NextResponse.json(        { success: false, message: 'Некорректный ID героя' },        { status: 400 }      );    }    const result = await sql`      SELECT * FROM heroes      WHERE id = ${id};    `;    if (result.rows.length === 0) {      return NextResponse.json(        { success: false, message: 'Герой не найден' },        { status: 404 }      );    }    const awards = await getHeroAwards(id);    const hero = mapDbHeroToHero(result.rows[0], awards);    return NextResponse.json({ success: true, data: hero });  } catch (error) {    console.error('Ошибка при получении героя:', error);    return NextResponse.json(      { success: false, message: 'Произошла ошибка при получении данных' },      { status: 500 }    );  }}export async function PUT(  request: NextRequest,  { params }: { params: { id: string } }) {  try {    const id = parseInt(params.id, 10);    if (isNaN(id)) {      return NextResponse.json(        { success: false, message: 'Некорректный ID героя' },        { status: 400 }      );    }    const body = await request.json();    const checkResult = await sql`      SELECT * FROM heroes      WHERE id = ${id};    `;    if (checkResult.rows.length === 0) {      return NextResponse.json(        { success: false, message: 'Герой не найден' },        { status: 404 }      );    }    await sql`      UPDATE heroes      SET name = ${body.name || checkResult.rows[0].name},          rank = ${body.rank !== undefined ? body.rank : checkResult.rows[0].rank},          region = ${body.region !== undefined ? body.region : checkResult.rows[0].region},          description = ${body.description !== undefined ? body.description : checkResult.rows[0].description},          years = ${body.years !== undefined ? body.years : checkResult.rows[0].years},          photo = ${body.photo !== undefined ? body.photo : checkResult.rows[0].photo}      WHERE id = ${id}    `;    if (body.awards && Array.isArray(body.awards)) {      await sql`        DELETE FROM awards        WHERE hero_id = ${id};      `;      if (body.awards.length > 0) {        await addHeroAwards(id, body.awards);      }    }    const result = await sql`      SELECT * FROM heroes      WHERE id = ${id};    `;    const awards = await getHeroAwards(id);    const updatedHero = mapDbHeroToHero(result.rows[0], awards);    return NextResponse.json({ success: true, data: updatedHero });  } catch (error) {    console.error('Ошибка при обновлении героя:', error);    return NextResponse.json(      { success: false, message: 'Произошла ошибка при обновлении данных' },      { status: 500 }    );  }}export async function DELETE(  request: NextRequest,  { params }: { params: { id: string } }) {  try {    const id = parseInt(params.id, 10);    if (isNaN(id)) {      return NextResponse.json(        { success: false, message: 'Некорректный ID героя' },        { status: 400 }      );    }    const checkResult = await sql`      SELECT * FROM heroes      WHERE id = ${id};    `;    if (checkResult.rows.length === 0) {      return NextResponse.json(        { success: false, message: 'Герой не найден' },        { status: 404 }      );    }    await sql`      DELETE FROM heroes      WHERE id = ${id};    `;    return NextResponse.json({       success: true,       message: 'Герой успешно удален'     });  } catch (error) {    console.error('Ошибка при удалении героя:', error);    return NextResponse.json(      { success: false, message: 'Произошла ошибка при удалении данных' },      { status: 500 }    );  }} 