import { NextRequest, NextResponse } from 'next/server';
import { Hero } from '@/types';
import { db } from '@/lib/db';
import { heroes, heroesModeration } from '@/lib/db/schema';
import { eq, like, and, or } from 'drizzle-orm';
import { initDB } from '@/lib/db/init';

// –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª–∞ –ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
let dbInitialized = false;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function ensureDbInitialized() {
  if (!dbInitialized) {
    try {
      console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      await initDB();
      dbInitialized = true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }
}

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
const mockHeroes: Hero[] = [
  {
    id: '1',
    name: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
    rank: '–ì–µ–Ω–µ—Ä–∞–ª-–º–∞–π–æ—Ä',
    region: '–ú–æ—Å–∫–≤–∞',
    description: '–í—ã–¥–∞—é—â–∏–π—Å—è –ø–æ–ª–∫–æ–≤–æ–¥–µ—Ü, —É—á–∞—Å—Ç–Ω–∏–∫ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –í–µ–ª–∏–∫–æ–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω—ã. –ü—Ä–æ—è–≤–∏–ª –æ—Ç–≤–∞–≥—É –ø—Ä–∏ –æ–±–æ—Ä–æ–Ω–µ –ú–æ—Å–∫–≤—ã –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ë–µ—Ä–ª–∏–Ω—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.',
    years: '1900-1975',
    photo: '/images/heroes/hero1.jpg',
    awards: ['–û—Ä–¥–µ–Ω –ö—Ä–∞—Å–Ω–æ–π –ó–≤–µ–∑–¥—ã', '–ú–µ–¥–∞–ª—å –ó–∞ –æ—Ç–≤–∞–≥—É', '–û—Ä–¥–µ–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ']
  },
  {
    id: '2',
    name: '–ü–µ—Ç—Ä–æ–≤ –ü—ë—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á',
    rank: '–ö–∞–ø–∏—Ç–∞–Ω',
    region: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ (–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥)',
    description: '–£—á–∞—Å—Ç–Ω–∏–∫ –æ–±–æ—Ä–æ–Ω—ã –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–∞. –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª —Å–Ω–∞–±–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –î–æ—Ä–æ–≥–µ –∂–∏–∑–Ω–∏, —Å–ø–∞—Å –¥–µ—Å—è—Ç–∫–∏ –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π.',
    years: '1915-1943',
    photo: '/images/heroes/hero2.jpg',
    awards: ['–û—Ä–¥–µ–Ω –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω—ã I —Å—Ç–µ–ø–µ–Ω–∏', '–ú–µ–¥–∞–ª—å –ó–∞ –æ–±–æ—Ä–æ–Ω—É –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–∞']
  },
  {
    id: '3',
    name: '–°–º–∏—Ä–Ω–æ–≤–∞ –ê–Ω–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞',
    rank: '–°—Ç–∞—Ä—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Å–ª—É–∂–±—ã',
    region: '–í–æ–ª–≥–æ–≥—Ä–∞–¥ (–°—Ç–∞–ª–∏–Ω–≥—Ä–∞–¥)',
    description: '–í–æ–µ–Ω–Ω—ã–π –≤—Ä–∞—á, —Å–ø–∞—Å–ª–∞ —Å–æ—Ç–Ω–∏ —Ä–∞–Ω–µ–Ω—ã—Ö –≤–æ –≤—Ä–µ–º—è –°—Ç–∞–ª–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –±–∏—Ç–≤—ã, —Ä–∞–±–æ—Ç–∞—è –≤ –ø–æ–ª–µ–≤–æ–º –≥–æ—Å–ø–∏—Ç–∞–ª–µ –ø–æ–¥ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–º–∏ –±–æ–º–±–µ–∂–∫–∞–º–∏.',
    years: '1918-2001',
    photo: '/images/heroes/hero3.jpg',
    awards: ['–û—Ä–¥–µ–Ω –ö—Ä–∞—Å–Ω–æ–≥–æ –ó–Ω–∞–º–µ–Ω–∏', '–ú–µ–¥–∞–ª—å –ó–∞ –æ–±–æ—Ä–æ–Ω—É –°—Ç–∞–ª–∏–Ω–≥—Ä–∞–¥–∞', '–û—Ä–¥–µ–Ω –õ–µ–Ω–∏–Ω–∞']
  },
  {
    id: '4',
    name: '–°–æ–∫–æ–ª–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∞—Å–∏–ª—å–µ–≤–∏—á',
    rank: '–°–µ—Ä–∂–∞–Ω—Ç',
    region: '–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    description: '–ö–æ–º–∞–Ω–¥–∏—Ä —Ç–∞–Ω–∫–æ–≤–æ–≥–æ —ç–∫–∏–ø–∞–∂–∞, —É—á–∞—Å—Ç–Ω–∏–∫ –ö—É—Ä—Å–∫–æ–π –±–∏—Ç–≤—ã. –£–Ω–∏—á—Ç–æ–∂–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–º–µ—Ü–∫–∏—Ö —Ç–∞–Ω–∫–æ–≤ –∏ —Å–ø–∞—Å —Å–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–∏—â–µ–π –∏–∑ –≥–æ—Ä—è—â–µ–π –º–∞—à–∏–Ω—ã.',
    years: '1922-1999',
    photo: '/images/heroes/hero4.jpg',
    awards: ['–û—Ä–¥–µ–Ω –°–ª–∞–≤—ã III —Å—Ç–µ–ø–µ–Ω–∏', '–ú–µ–¥–∞–ª—å –ó–∞ –æ—Ç–≤–∞–≥—É']
  },
  {
    id: '5',
    name: '–ö–æ–∑–ª–æ–≤ –î–º–∏—Ç—Ä–∏–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á',
    rank: '–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç',
    region: '–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    description: '–ö–æ–º–∞–Ω–¥–∏—Ä —Å—Ç—Ä–µ–ª–∫–æ–≤–æ–≥–æ –≤–∑–≤–æ–¥–∞, –ø—Ä–æ—è–≤–∏–ª –≥–µ—Ä–æ–∏–∑–º –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏.',
    years: '1920-1943',
    photo: '/images/heroes/hero5.jpg',
    awards: ['–û—Ä–¥–µ–Ω –ö—Ä–∞—Å–Ω–æ–≥–æ –ó–Ω–∞–º–µ–Ω–∏', '–ú–µ–¥–∞–ª—å –ó–∞ –æ—Ç–≤–∞–≥—É']
  }
];

/**
 * GET /api/heroes
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–µ—Ä–æ–µ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 */
export async function GET(request: Request) {
  try {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    await ensureDbInitialized();
    
    const { searchParams } = new URL(request.url);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const lastName = searchParams.get('lastName');
    const firstName = searchParams.get('firstName');
    const middleName = searchParams.get('middleName');
    const school = searchParams.get('school');
    const classParam = searchParams.get('class');
    const award = searchParams.get('award');
    const birthYear = searchParams.get('birthYear');
    
    let filters = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
    if (lastName) {
      filters.push(like(heroes.lastName, `%${lastName}%`));
    }
    
    if (firstName) {
      filters.push(like(heroes.firstName, `%${firstName}%`));
    }
    
    if (middleName) {
      filters.push(like(heroes.middleName, `%${middleName}%`));
    }
    
    if (school) {
      filters.push(like(heroes.school, `%${school}%`));
    }
    
    if (classParam) {
      filters.push(like(heroes.class, `%${classParam}%`));
    }
    
    if (award) {
      filters.push(like(heroes.awards, `%${award}%`));
    }
    
    if (birthYear) {
      filters.push(eq(heroes.birthYear, parseInt(birthYear)));
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏–ª–∏ –±–µ–∑ –Ω–∏—Ö
    let result;
    if (filters.length > 0) {
      result = await db.select().from(heroes).where(and(...filters));
    } else {
      result = await db.select().from(heroes);
    }
    
    return NextResponse.json(result);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ—Ä–æ–µ–≤:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ—Ä–æ–µ–≤' },
      { status: 500 }
    );
  }
}

/**
 * POST /api/heroes
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
 */
export async function POST(request: Request) {
  try {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    await ensureDbInitialized();
    
    const body = await request.json();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!body.lastName || !body.firstName || !body.school || !body.class || !body.addedBy) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' },
        { status: 400 }
      );
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ—Ä–æ—è –≤ —Ç–∞–±–ª–∏—Ü—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    // –¢–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –≥–µ—Ä–æ–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    const isNewSchool = !!body.isNewSchool;
    
    const result = await db.insert(heroesModeration).values({
      lastName: body.lastName,
      firstName: body.firstName,
      middleName: body.middleName,
      birthYear: body.birthYear,
      deathYear: body.deathYear,
      awards: body.awards,
      school: body.school,
      class: body.class,
      addedBy: body.addedBy,
      isNewSchool: isNewSchool,
      status: 'pending'
    }).returning();
    
    const newHero = result[0];
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω API –∫–ª—é—á
    const apiKey = process.env.API_KEY;
    if (apiKey) {
      try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        let message = `<b>üéñÔ∏è –ù–æ–≤—ã–π –≥–µ—Ä–æ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!</b>\n\n`;
        message += `<b>–§–ò–û:</b> ${body.lastName} ${body.firstName} ${body.middleName || ''}\n`;
        message += `<b>–®–∫–æ–ª–∞:</b> ${body.school}\n`;
        message += `<b>–ö–ª–∞—Å—Å:</b> ${body.class}\n`;
        message += `<b>–î–æ–±–∞–≤–∏–ª:</b> ${body.addedBy}\n`;
        
        if (body.birthYear) {
          message += `<b>–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ${body.birthYear}\n`;
        }
        
        if (body.deathYear) {
          message += `<b>–ì–æ–¥ —Å–º–µ—Ä—Ç–∏:</b> ${body.deathYear}\n`;
        }
        
        if (body.awards) {
          message += `<b>–ù–∞–≥—Ä–∞–¥—ã:</b> ${body.awards}\n`;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è —à–∫–æ–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º
        if (isNewSchool) {
          message += `\n<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</b> –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —à–∫–æ–ª–∞: <b>${body.school}</b>\n`;
          message += `–¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —à–∫–æ–ª.`;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || `http://localhost:3000`;
        const telegramResponse = await fetch(`${baseUrl}/api/telegram`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey
          },
          body: JSON.stringify({ 
            message, 
            heroId: newHero.id 
          }),
        });
        
        const telegramResult = await telegramResponse.json();
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –∑–∞–ø–∏—Å–∏ –æ –≥–µ—Ä–æ–µ
        if (telegramResult.messageId) {
          await db.update(heroesModeration)
            .set({ telegramMessageId: telegramResult.messageId })
            .where(eq(heroesModeration.id, newHero.id));
        }
      } catch (telegramError) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', telegramError);
      }
    }
    
    return NextResponse.json(result[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–µ—Ä–æ—è:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–µ—Ä–æ—è' },
      { status: 500 }
    );
  }
} 