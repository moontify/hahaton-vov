'use client';import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';type HeroFilter = {  region: string;  award: string;  rank: string;  yearFrom: string;  yearTo: string;  searchQuery: string;};type AppContextType = {  darkMode: boolean;  toggleDarkMode: () => void;  heroFilters: HeroFilter;  updateHeroFilters: (filters: Partial<HeroFilter>) => void;  resetHeroFilters: () => void;  quizProgress: Record<string, number>;  updateQuizProgress: (quizId: string, score: number) => void;  isLoading: boolean;  setIsLoading: (loading: boolean) => void;};const defaultContextValue: AppContextType = {  darkMode: true,  toggleDarkMode: () => {},  heroFilters: {    region: '',    award: '',    rank: '',    yearFrom: '',    yearTo: '',    searchQuery: '',  },  updateHeroFilters: () => {},  resetHeroFilters: () => {},  quizProgress: {},  updateQuizProgress: () => {},  isLoading: false,  setIsLoading: () => {},};const AppContext = createContext<AppContextType>(defaultContextValue);export const useAppContext = () => useContext(AppContext);export const AppContextProvider = ({ children }: { children: ReactNode }) => {  const [darkMode, setDarkMode] = useState(true);  const [heroFilters, setHeroFilters] = useState<HeroFilter>(defaultContextValue.heroFilters);  const [quizProgress, setQuizProgress] = useState<Record<string, number>>({});  const [isLoading, setIsLoading] = useState(false);  const toggleDarkMode = () => {    setDarkMode(!darkMode);  };  const updateHeroFilters = (filters: Partial<HeroFilter>) => {    setHeroFilters((prev) => ({ ...prev, ...filters }));  };  const resetHeroFilters = () => {    setHeroFilters(defaultContextValue.heroFilters);  };  const updateQuizProgress = (quizId: string, score: number) => {    setQuizProgress((prev) => ({ ...prev, [quizId]: score }));    if (typeof window !== 'undefined') {      localStorage.setItem('quizProgress', JSON.stringify({        ...quizProgress,        [quizId]: score      }));    }  };  useEffect(() => {    if (typeof window !== 'undefined') {      const savedProgress = localStorage.getItem('quizProgress');      if (savedProgress) {        try {          setQuizProgress(JSON.parse(savedProgress));        } catch (e) {          console.error('Ошибка при загрузке прогресса тестов:', e);        }      }    }  }, []);  const contextValue: AppContextType = {    darkMode,    toggleDarkMode,    heroFilters,    updateHeroFilters,    resetHeroFilters,    quizProgress,    updateQuizProgress,    isLoading,    setIsLoading,  };  return (    <AppContext.Provider value={contextValue}>      {children}    </AppContext.Provider>  );};export default AppContextProvider; 